#!/bin/bash

GIT_COLOR="#ff966c"

git_color_text() {
	gum style --foreground "$GIT_COLOR" "$1"
}

header="Choose $(git_color_text "branches") to operate on:"
actionHeader="Choose a $(git_color_text "command"):"

get_branches() {
	# shellcheck disable=2046
	if [ "${1+x}" ]; then
		gum choose --header="$header" --header.foreground="#ffE9E9" --selected.foreground="$GIT_COLOR" --limit="$1" $(git branch --format="%(refname:short)")
	else
		gum choose --header="$header" --header.foreground="#ffE9E9" --selected.foreground="$GIT_COLOR" --no-limit $(git branch --format="%(refname:short)")
	fi
}

git rev-parse --git-dir >/dev/null 2>&1

if [ $? -ne 0 ]; then
	echo "$(git_color_text "!!") Must be run in a $(git_color_text "git") repo"
	exit 1
fi

gum style \
	--border normal \
	--margin "1" \
	--padding "1" \
	--border-foreground "$GIT_COLOR" \
	"$(git_color_text 'Ôêò Git') Branch Manager"

branches=$(get_branches)

command=$(gum choose --header="$actionHeader" --header.foreground="#ffE9E9" --cursor.foreground="$GIT_COLOR" rebase delete update checkout)

echo "$branches" | tr " " "\n" | while read -r branch; do
	case $command in
	rebase)
		base_branch=$(get_branches 1)
		git fetch origin
		git checkout "$branch"
		git rebase "origin/$base_branch"
		;;
	delete)
		git branch -D "$branch"
		;;
	update)
		git checkout "$branch"
		git pull --ff-only
		;;
	checkout)
		git checkout "$branch"
		;;
	esac
done
